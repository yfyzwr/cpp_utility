// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: City.proto

#ifndef PROTOBUF_City_2eproto__INCLUDED
#define PROTOBUF_City_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace tutorial {
class City;
class CityDefaultTypeInternal;
extern CityDefaultTypeInternal _City_default_instance_;
}  // namespace tutorial

namespace tutorial {

namespace protobuf_City_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_City_2eproto

// ===================================================================

class City : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.City) */ {
 public:
  City();
  virtual ~City();

  City(const City& from);

  inline City& operator=(const City& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const City& default_instance();

  static inline const City* internal_default_instance() {
    return reinterpret_cast<const City*>(
               &_City_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(City* other);

  // implements Message ----------------------------------------------

  inline City* New() const PROTOBUF_FINAL { return New(NULL); }

  City* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const City& from);
  void MergeFrom(const City& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(City* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string postnumber = 3;
  void clear_postnumber();
  static const int kPostnumberFieldNumber = 3;
  const ::std::string& postnumber() const;
  void set_postnumber(const ::std::string& value);
  #if LANG_CXX11
  void set_postnumber(::std::string&& value);
  #endif
  void set_postnumber(const char* value);
  void set_postnumber(const char* value, size_t size);
  ::std::string* mutable_postnumber();
  ::std::string* release_postnumber();
  void set_allocated_postnumber(::std::string* postnumber);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.City)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr postnumber_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct protobuf_City_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// City

// string name = 1;
inline void City::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& City::name() const {
  // @@protoc_insertion_point(field_get:tutorial.City.name)
  return name_.GetNoArena();
}
inline void City::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.City.name)
}
#if LANG_CXX11
inline void City::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.City.name)
}
#endif
inline void City::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.City.name)
}
inline void City::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.City.name)
}
inline ::std::string* City::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.City.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* City::release_name() {
  // @@protoc_insertion_point(field_release:tutorial.City.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void City::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tutorial.City.name)
}

// int32 id = 2;
inline void City::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 City::id() const {
  // @@protoc_insertion_point(field_get:tutorial.City.id)
  return id_;
}
inline void City::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tutorial.City.id)
}

// string postnumber = 3;
inline void City::clear_postnumber() {
  postnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& City::postnumber() const {
  // @@protoc_insertion_point(field_get:tutorial.City.postnumber)
  return postnumber_.GetNoArena();
}
inline void City::set_postnumber(const ::std::string& value) {
  
  postnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.City.postnumber)
}
#if LANG_CXX11
inline void City::set_postnumber(::std::string&& value) {
  
  postnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.City.postnumber)
}
#endif
inline void City::set_postnumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  postnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.City.postnumber)
}
inline void City::set_postnumber(const char* value, size_t size) {
  
  postnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.City.postnumber)
}
inline ::std::string* City::mutable_postnumber() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.City.postnumber)
  return postnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* City::release_postnumber() {
  // @@protoc_insertion_point(field_release:tutorial.City.postnumber)
  
  return postnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void City::set_allocated_postnumber(::std::string* postnumber) {
  if (postnumber != NULL) {
    
  } else {
    
  }
  postnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postnumber);
  // @@protoc_insertion_point(field_set_allocated:tutorial.City.postnumber)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_City_2eproto__INCLUDED
